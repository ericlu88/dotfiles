#!/usr/bin/env bash
## path - various *PATH environment configuration

## set path to dotfiles and local overrides
DOTFILES=${DOTFILES:-~/.dotfiles}
DOTFILES_LOCAL=${DOTFILES_LOCAL:-"$DOTFILES"/local}

## Remove the specified 'directory' from the optionally specified 'path'
## variable.  If 'path' is not specified, PATH will be used.
## usage: pathremove <directory> <path>
pathremove() {
    local IFS=':'
    local NEWPATH
    local DIR
    local PATHVARIABLE=${2:-PATH}
    for DIR in ${!PATHVARIABLE}; do
        if [ "$DIR" != "$1" ]; then
            NEWPATH=${NEWPATH:+$NEWPATH:}$DIR
        fi
    done
    export $PATHVARIABLE="$NEWPATH"
}

## Prepend the specified 'directory' to the optionally specified 'path'
## variable.  If 'path' is not specified, PATH will be used.  Note that any
## existing reference to the 'directory' will be removed from 'path'.
## usage: pathprepend <directory> <path>
pathprepend() {
    pathremove $1 $2
    local PATHVARIABLE=${2:-PATH}
    export $PATHVARIABLE="$1${!PATHVARIABLE:+:${!PATHVARIABLE}}"
}

## Append the specified 'directory' to the optionally specified 'path'
## variable.  If 'path' is not specified, PATH will be used.  Note that any
## existing reference to the 'directory' will be removed from 'path'.
## usage: pathappend <directory> <path>
pathappend() {
    pathremove $1 $2
    local PATHVARIABLE=${2:-PATH}
    export $PATHVARIABLE="${!PATHVARIABLE:+${!PATHVARIABLE}:}$1"
}

## Build a path using the optionally specified 'command'  and the optionally
## specified 'path' variable.  If 'command' is not specified, pathappend will
## be used.  If 'path' is not specified, PATH will be used. The paths should be
## separated on their own line in a "here document".  An example of an
## "here document" can be seen below setting the default PATH.
build_path() {
    local PATHVAR=${1:-PATH}
    local PATHCMD=${2:-pathappend}
    local DIR
    while read DIR; do
        if [ -d "$DIR" ]; then
            "$PATHCMD" "$DIR" "$PATHVAR"
        fi
    done
}

## source local override file if one exists
[ -r "$DOTFILES_LOCAL"/path ] && . "$DOTFILES_LOCAL"/path

## personal directories are always first
build_path PATH pathprepend << EOF
$HOME/.local/bin
$HOME/bin
EOF

## clean up
unset pathremove pathprepend pathappend build_path
